generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model book {
    id          Int    @id @default(autoincrement())
    name        String @unique(map: "Book_name_key")
    author      String
    description String
    userId      Int
    user        user   @relation(fields: [userId], references: [id], map: "Book_userId_fkey")

    @@index([userId], map: "Book_userId_fkey")
}

model user {
    id             Int              @id @default(autoincrement())
    name           String           @unique(map: "User_name_key")
    password       String
    nick_name      String //昵称
    email          String
    headPic        String           @default("") @db.VarChar(100) //头像
    createTime     DateTime         @default(now())
    updateTime     DateTime         @updatedAt
    book           book[]
    // 添加一个数组来存储权限的ID
    permissions    Permission[]
    UserPermission UserPermission[]

    friends        Friendship[] @relation("userToFriend")
    inverseFriends Friendship[] @relation("friendToUser")
}

model Friendship {
    user     user @relation("userToFriend", fields: [userId], references: [id])
    userId   Int
    friend   user @relation("friendToUser", fields: [friendId], references: [id])
    friendId Int

    @@id([userId, friendId])
}

model Permission {
    id         Int      @id @default(autoincrement())
    name       String
    desc       String
    createTime DateTime @default(now())
    updateTime DateTime @updatedAt

    // 添加一个数组来存储用户的ID
    users          user[]
    UserPermission UserPermission[]
}

model UserPermission {
    id           Int        @id @default(autoincrement())
    // 外键关联到User
    userId       Int
    user         user       @relation(fields: [userId], references: [id])
    // 外键关联到Permission
    permissionId Int
    permission   Permission @relation(fields: [permissionId], references: [id])
}

model FriendRequest {
    id         Int      @id @default(autoincrement())
    //请求发送方
    fromUserId Int
    //待添加好友
    toUserId   Int
    //添加理由
    reason     String   @db.VarChar(100)
    //状态，0.请求中，1，已同意，2已拒绝
    status     Int
    createTime DateTime @default(now())
    updateTime DateTime @updatedAt
}

model Chatroom {
    id         Int      @id @default(autoincrement())
    name       String   @db.VarChar(50)
    // 聊天室类型 true 群聊 false 单聊
    type       Boolean  @default(false)
    createTime DateTime @default(now())
    updateTime DateTime @updatedAt
}

model UserChatroom {
    userId     Int
    chatroomId Int

    @@id([userId, chatroomId])
}

//聊天历史
model ChatHistory {
    id         Int      @id @default(autoincrement())
    content    String   @db.VarChar(500)
    //聊天记录类型 text:0、image:1、file:2
    type       Int
    chatroomId Int
    senderId   Int
    createTime DateTime @default(now())
    updateTime DateTime @updatedAt
}
